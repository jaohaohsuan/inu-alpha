akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = info
  log-dead-letters = 1
  log-dead-letters-during-shutdown = off

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    debug {
      receive = off
      lifecycle = off
    }
  }

  remote {
    netty.tcp {
      hostname = ${clustering.ip}
      port = ${clustering.port}
    }
  }

  cluster {
    log-info = on
    auto-down-unreachable-after = 10s
    metrics.enabled = off
    metrics.native-library-extract-folder=${user.dir}/target/native
    client.receptionist {
      name = receptionist
    }
  }

  extensions = [
    "akka.cluster.metrics.ClusterMetricsExtension",
    "akka.cluster.client.ClusterClientReceptionist"
  ]
}

akka.persistence {
  journal.plugin = "akka.persistence.journal.leveldb-shared"
  snapshot-store.plugin = "akka.persistence.snapshot-store.local"
  snapshot-store.local.dir = "target/snapshots"
}

akka.persistence.query.journal.leveldb {
  # Implementation class of the LevelDB ReadJournal
  class = "akka.persistence.query.journal.leveldb.LeveldbReadJournal"

  # Absolute path to the write journal plugin configuration entry that this
  # query journal will connect to. That must be a LeveldbJournal or SharedLeveldbJournal.
  # If undefined (or "") it will connect to the default journal as specified by the
  # akka.persistence.journal.plugin property.
  write-plugin = ""

}

akka.cluster.singleton {
  # The actor name of the child singleton actor.
  singleton-name = "singleton"

  # Singleton among the nodes tagged with specified role.
  # If the role is not specified it's a singleton among all nodes in the cluster.
  role = "compute"
}

akka.cluster.singleton-proxy {
  # The actor name of the singleton actor that is started by the ClusterSingletonManager
  singleton-name = ${akka.cluster.singleton.singleton-name}

  # The role of the cluster nodes where the singleton can be deployed.
  # If the role is not specified then any node will do.
  role = "compute"

  buffer-size = 1000
}

clustering {
  port = ${?CLUSTER_PORT}
  cluster.name = inu
}
