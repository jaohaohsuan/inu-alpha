akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  loglevel = info
  log-dead-letters = 1
  log-dead-letters-during-shutdown = off

  actor {

    kryo  {
      kryo-custom-serializer-init = "seed.KryoInit"
      implicit-registration-logging = true
      kryo-trace = false
      mappings {

      }
    }

    serializers {
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }

    serialization-bindings {
      "domain.storedQuery.StoredQueryAggregateRoot$ItemCreated" = kryo
      "domain.storedQuery.StoredQueryAggregateRoot$ItemsChanged" = kryo
    }

    //serialize-messages = on
    //serialize-creators = on
    provider = "akka.cluster.ClusterActorRefProvider"
    debug {
      receive = off
      lifecycle = off
    }
  }

  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      port = ${storedq.port}
    }
  }

  cluster {
    log-info = off
    auto-down-unreachable-after = 2s
    metrics.enabled = off
    client.receptionist {
      name = receptionist
    }
    seed-nodes = []
  }

  extensions = [
    "akka.cluster.metrics.ClusterMetricsExtension",
    "akka.cluster.client.ClusterClientReceptionist",
    "com.romix.akka.serialization.kryo.KryoSerializationExtension$",
  ]
}

akka.cluster.singleton {
  # The actor name of the child singleton actor.
  singleton-name = "singleton"

  # Singleton among the nodes tagged with specified role.
  # If the role is not specified it's a singleton among all nodes in the cluster.
  # role = "compute"
}

akka.cluster.singleton-proxy {
  # The actor name of the singleton actor that is started by the ClusterSingletonManager
  singleton-name = ${akka.cluster.singleton.singleton-name}

  # The role of the cluster nodes where the singleton can be deployed.
  # If the role is not specified then any node will do.
  role = "compute"

  buffer-size = 1000
}

storedq {
  cluster-name = "cluster1"
  ifac = "en0"
  ifac = ${?IFAC}
  port = 2551
  port = ${?PORT}
  seed-nodes = ""
  seed-nodes = ${?SEED_NODES}
  seed-port = ${storedq.port}
  seed-port = ${?SEED_PORT}
  cassandra-nodes = "127.0.0.1"
  cassandra-nodes = ${?CASSANDRA_NODES}
}

spray.routing {
  users {
    atlas = subaru
    dev = grandsys
  }
}